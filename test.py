import os
import pandas as pd
from dotenv import load_dotenv
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
groq_api_key = os.getenv('groq_api_key')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
if not groq_api_key:
    raise ValueError("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω API-–∫–ª—é—á GROQ. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –∑–∞–¥–∞–Ω 'groq_api_key'.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
llm = ChatGroq(
    temperature=0.3,
    groq_api_key=groq_api_key,
    model_name="gemma2-9b-it"
)

# –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
db_description = """
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

–¢–∞–±–ª–∏—Ü–∞ `CLIENTS` ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö.
- `ClientID` ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞.
- `ClientName` ‚Äî –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.
- `Type` ‚Äî —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å).

–¢–∞–±–ª–∏—Ü–∞ `PRODUCTS` ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö.
- `ProductID` ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.
- `ProductName` ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "TV", "PC").

–¢–∞–±–ª–∏—Ü–∞ `TTNS` ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–Ω–æ-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
- `TTNID` ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
- `TTNNumber` ‚Äî –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
- `TTNDate` ‚Äî –¥–∞—Ç–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
- `SenderID` ‚Äî –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ `CLIENTS(ClientID)`, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å.
- `ReceiverID` ‚Äî –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ `CLIENTS(ClientID)`, –ø–æ–ª—É—á–∞—Ç–µ–ª—å.

–¢–∞–±–ª–∏—Ü–∞ `SPECIFICATIONS` ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
- `TTNID` ‚Äî –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ `TTNS(TTNID)`.
- `ProductID` ‚Äî –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ `PRODUCTS(ProductID)`.
- `Count` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.
- `Price` ‚Äî —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.
"""

# –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
evaluation_prompt = PromptTemplate.from_template("""
–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ SQL. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, SQL-–∑–∞–¥–∞—á–∞ –∏ SQL-–∑–∞–ø—Ä–æ—Å, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç–æ–º.
–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∑–∞–¥–∞—á–∏ –∏ –º–æ–∂–µ—Ç –¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —ç—Ç–∞–ª–æ–Ω–∞ ‚Äî —Å—á–∏—Ç–∞–π—Ç–µ –µ–≥–æ "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º".

–û–ø–∏—Å–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
{db_description}

–ó–∞–¥–∞–Ω–∏–µ:
{task}

–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ (SQL-–∑–∞–ø—Ä–æ—Å):
{student_answer}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞:
1. –ò—Ç–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏.
2. –î–∞–π—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é –∫—Ä–∞—Ç–∫—É—é –æ—Ü–µ–Ω–∫—É: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π / –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.

–¥–∞–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
""")

# –¶–µ–ø–æ—á–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
analyze_chain = evaluation_prompt | llm

def analyze_excel(file_path):
    df = pd.read_excel(file_path, engine="openpyxl")
    results = []
    correct_matches = 0
    total_checked = 0

    def extract_verdict(text):
        text = text.lower().replace("—ë", "–µ").strip()
        p = text.find("–ø—Ä–∞–≤–∏–ª—å–Ω")
        np = text.find("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω")

        if p == -1 and np == -1:
            return "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        if np != -1 and (p == -1 or np < p):
            return "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        return "–ø—Ä–∞–≤–∏–ª—å–Ω–æ"


    for i, row in df.iterrows():
        try:
            task = str(row.iloc[0]).strip()
            answer = str(row.iloc[1]).strip()
            comment = str(row.iloc[2]).strip() if len(row) > 2 else ""

            if not task or not answer:
                continue

            result = analyze_chain.invoke({
                "db_description": db_description,
                "task": task,
                "student_answer": answer
            })

            llm_verdict = extract_verdict(result.content)
            expected_verdict = extract_verdict(comment)

            if llm_verdict == expected_verdict and llm_verdict != "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ":
                correct_matches += 1

            total_checked += 1

            combined_output = f"{result.content.strip()}  üìù –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {comment}"
            results.append((i + 1, task, combined_output))

        except Exception as e:
            results.append((i + 1, task, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}"))

    return results, correct_matches, total_checked




if __name__ == "__main__":
    file_path = "—Ç–µ—Å—Ç—ã.xlsx"
    
    if not os.path.exists(file_path):
        print(f"‚ùó –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        analyzed, correct, total = analyze_excel(file_path)

        for idx, task_text, feedback in analyzed:
            print(f"\nüßæ –ó–∞–¥–∞–Ω–∏–µ {idx}  {feedback}\n{'-'*70}")

        print(f"\n‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {correct} –∏–∑ {total} ({round(correct / total * 100, 1)}%)")
