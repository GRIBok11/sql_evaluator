import gradio as gr
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from dotenv import load_dotenv
import os
from docx import Document


load_dotenv()
groq_api_key = os.getenv("groq_api_key")


llm = ChatGroq(
    temperature=0.3,
    groq_api_key=groq_api_key,
    model_name="gemma2-9b-it"
)

evaluation_prompt = PromptTemplate.from_template("""
–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ SQL. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞–Ω–∏—è –∏ SQL-–∑–∞–ø—Ä–æ—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç–æ–º. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ SQL-–∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–¥–∞—á–∏ –∏ –¥–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π / –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π) —Å –∫—Ä–∞—Ç–∫–∏–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º.

–¢–µ–∫—Å—Ç:
{text}

–î–∞–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏–ª–∏ –Ω–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–æ–≥–æ —á—Ç–æ –≤—ã–≤–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏:
""")

analyze_chain = evaluation_prompt | llm | StrOutputParser()


def read_full_docx(file):
    doc = Document(file)
    return "\n".join([p.text for p in doc.paragraphs]).strip()


def evaluate_docx_whole(file, schema_text):
    text = read_full_docx(file)
    if not text.strip() and not schema_text.strip():
        return "‚ùóÔ∏è**–§–∞–π–ª –∏ —Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç—ã ‚Äî –Ω–µ—á–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.**"
    
    combined_text = f"{text.strip()}\n\n### SQL-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n{schema_text.strip()}"
    result = analyze_chain.invoke({"text": combined_text})
    
    return f"### üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞\n\n{result.strip()}"



with gr.Blocks(title="AI-–æ—Ü–µ–Ω–∫–∞ SQL-–∑–∞–¥–∞–Ω–∏—è üßæ") as demo:
    gr.Markdown("## üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º –∏ –≤—Å—Ç–∞–≤—å—Ç–µ SQL-—Å–∫—Ä–∏–ø—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î")
    
    file_input = gr.File(label="üì• –§–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (.docx)", file_types=[".docx"])
    schema_input = gr.Textbox(label="üìÑ SQL-—Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü", lines=12, placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ CREATE TABLE ...")
    
    output = gr.Markdown(label="üìä –û—Ü–µ–Ω–∫–∞")
    btn = gr.Button("üîç –û—Ü–µ–Ω–∏—Ç—å")

    btn.click(fn=evaluate_docx_whole, inputs=[file_input, schema_input], outputs=output)

if __name__ == "__main__":
    demo.launch()
